@article{Schwab00makingscientific,
   author = {Matthias Schwab and Martin Karrenbach and Jon Claerbout},
   title = {Making Scientific Computations Reproducible},
   booktitle = {Computing in Science \& Engineering},
   year = {2000},
   pages = {61--67},
   volume = {2},
   number = {6},
   publisher = {IEEE},
   doi = {10.1109/5992.881708}
}


@article{mapReduce,
 author = {Dean, Jeffrey and Ghemawat, Sanjay},
 title = {MapReduce: simplified data processing on large clusters},
 journal = {Commun. ACM},
 issue_date = {January 2008},
 volume = {51},
 number = {1},
 month = jan,
 year = {2008},
 issn = {0001-0782},
 pages = {107--113},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/1327452.1327492},
 doi = {10.1145/1327452.1327492},
 acmid = {1327492},
 publisher = {ACM},
 address = {New York, NY, USA},
}


@article{Perez2007,
author = {Perez, Fernando and Granger, Brian E.},
doi = {10.1109/MCSE.2007.53},
issn = {1521-9615},
journal = {Computing in Science \& Engineering},
number = {3},
pages = {21--29},
title = {{IPython: A System for Interactive Scientific Computing}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4160251},
volume = {9},
year = {2007}
}

@inproceedings{Fomel2007,
author = {Sergey Fomel and Gilles Hennenfent},
title = {Reproducible Computational Experiments using Scons},
year = {2007},
doi = {10.1109/ICASSP.2007.367305},
booktitle = {IEEE International Conference on Acoustics, Speech and Signal Processing},
}


@article{Delescluse2011,
title = "Making neurophysiological data analysis reproducible: Why and how?",
journal = "Journal of Physiology-Paris",
volume = "",
number = "0",
pages = " - ",
year = "2011",
note = "",
issn = "0928-4257",
doi = "10.1016/j.jphysparis.2011.09.011",
url = "http://www.sciencedirect.com/science/article/pii/S0928425711000374",
author = "Matthieu Delescluse and Romain Franconville and SÃ©bastien Joucla and Tiffany Lieury and Christophe Pouzat",
keywords = "Software",
keywords = "R",
keywords = "Emacs",
keywords = "Matlab",
keywords = "Octave",
keywords = "LATEX",
keywords = "Org-mode",
keywords = "Python"
}


@ARTICLE{Vandewalle2009,
author={Vandewalle, P. and Kovacevic, J. and Vetterli, M.},
journal={Signal Processing Magazine, IEEE},
title={Reproducible research in signal processing},
year={2009},
month={may },
volume={26},
number={3},
pages={37 -47},
keywords={high-quality reviewing process;large data set;reproducible research;signal processing;win-win situation;research and development;signal processing;},
doi={10.1109/MSP.2009.932122},
ISSN={1053-5888},}

@article{Nordlie2009,
    author = {Nordlie, Eilen AND Gewaltig, Marc-Oliver AND Plesser, Hans Ekkehard},
    journal = {PLoS Comput Biol},
    publisher = {Public Library of Science},
    title = {Towards Reproducible Descriptions of Neuronal Network Models},
    year = {2009},
    month = {08},
    volume = {5},
    url = {http://dx.doi.org/10.1371%2Fjournal.pcbi.1000456},
    pages = {e1000456},
    number = {8},
    doi = {10.1371/journal.pcbi.1000456}
}


@article{Goodstadt16092010,
author = {Goodstadt, Leo},
title = {Ruffus: A Lightweight Python Library for Computational Pipelines},
year = {2010},
doi = {10.1093/bioinformatics/btq524},
abstract ={Summary: Computational pipelines are common place in scientific research. However, most of the resources for constructing pipelines are heavyweight systems with graphics user interfaces.Ruffus is a library for the creation of computational pipelines. Its lightweight and unobtrusive design recommends it for use even for the most trivial of analyses. At the same time, it is powerful enough to have been used for complex workflows involving more than 50 interdependent stages.Availability and Implementation: Ruffus is written in python. Source code, a short tutorial, examples, and a comprehensive user manual are freely available at http://www.ruffus.org.uk.Supplementary information: The example program is available at http://www.ruffus.org.uk/examples/bioinformaticsContact: ruffus@llew.org.uk},
URL = {http://bioinformatics.oxfordjournals.org/content/early/2010/09/16/bioinformatics.btq524.abstract},
eprint = {http://bioinformatics.oxfordjournals.org/content/early/2010/09/16/bioinformatics.btq524.full.pdf+html},
journal = {Bioinformatics}
}


@Article{mishima2011,
AUTHOR = {Mishima, Hiroyuki and Sasaki, Kensaku and Tanaka, Masahiro and Tatebe, Osamu and Yoshiura, Koh-ichiro},
TITLE = {Agile parallel bioinformatics workflow management using Pwrake},
JOURNAL = {BMC Research Notes},
VOLUME = {4},
YEAR = {2011},
NUMBER = {1},
PAGES = {331},
URL = {http://www.biomedcentral.com/1756-0500/4/331},
DOI = {10.1186/1756-0500-4-331},
PubMedID = {21899774},
ISSN = {1756-0500},
ABSTRACT = {BACKGROUND:In bioinformatics projects, scientific workflow systems are widely used to manage computational procedures. Full-featured workflow systems have been proposed to fulfil the demand for workflow management. However, such systems tend to be over-weighted for actual bioinformatics practices. We realize that quick deployment of cutting-edge software implementing advanced algorithms and data formats, and continuous adaptation to changes in computational resources and the environment are often prioritized in scientific workflow management. These features have a greater affinity with the agile software development method through iterative development phases after trial and error.Here, we show the application of a scientific workflow system Pwrake to bioinformatics workflows. Pwrake is a parallel workflow extension of Ruby's standard build tool Rake, the flexibility of which has been demonstrated in the astronomy domain. Therefore, we hypothesize that Pwrake also has advantages in actual bioinformatics workflows.FINDINGS:We implemented the Pwrake workflows to process next generation sequencing data using the Genomic Analysis Toolkit (GATK) and Dindel. GATK and Dindel workflows are typical examples of sequential and parallel workflows, respectively. We found that in practice, actual scientific workflow development iterates over two phases, the workflow definition phase and the parameter adjustment phase. We introduced separate workflow definitions to help focus on each of the two developmental phases, as well as helper methods to simplify the descriptions. This approach increased iterative development efficiency. Moreover, we implemented combined workflows to demonstrate modularity of the GATK and Dindel workflows.CONCLUSIONS:Pwrake enables agile management of scientific workflows in the bioinformatics domain. The internal domain specific language design built on Ruby gives the flexibility of rakefiles for writing scientific workflows. Furthermore, readability and maintainability of rakefiles may facilitate sharing workflows among the scientific community. Workflows for GATK and Dindel are available at http://github.com/misshie/Workflows webcite.},
}

@inproceedings{Guo_IncPy,
   author = {Guo, Philip J. and Engler, Dawson},
   title = {Using automatic persistent memoization to facilitate data analysis scripting},
   booktitle = {Proceedings of the 2011 International Symposium on Software Testing and Analysis},
   series = {ISSTA '11},
   year = {2011},
   isbn = {978-1-4503-0562-4},
   location = {Toronto, Ontario, Canada},
   pages = {287--297},
   numpages = {11},
   url = {http://doi.acm.org/10.1145/2001420.2001455},
   doi = {10.1145/2001420.2001455},
   acmid = {2001455},
   publisher = {ACM},
   address = {New York, NY, USA},
   keywords = {dependency management, scientific workflows},
}

@inproceedings{Guo_IncPy_pre,
    author = {Philip J. Guo, Dawson Engler},
    title = {Towards Practical Incremental Recomputation for Scientists: An Implementation for the Python Language},
    booktitle = {Proceedings of the USENIX Workshop on the Theory and Practice of Provenance (TaPP)},
    year = {2010},
    month = {February}
}


